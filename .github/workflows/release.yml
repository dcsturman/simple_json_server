name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  pull-requests: read

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        generate_release_notes: true

  publish-crates:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-publish-${{ hashFiles('**/Cargo.lock') }}

    - name: Publish actor_attribute_macro
      run: |
        cd actor_attribute_macro
        cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
      continue-on-error: true  # In case already published

    - name: Wait for crates.io propagation
      run: sleep 30

    - name: Publish simple_json_server
      run: |
        cd simple_json_server
        cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
      continue-on-error: true  # In case already published

  build-binaries:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: simple_json_server_demo
            asset_name: simple_json_server_demo-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: simple_json_server_demo.exe
            asset_name: simple_json_server_demo-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: simple_json_server_demo
            asset_name: simple_json_server_demo-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: simple_json_server_demo
            asset_name: simple_json_server_demo-macos-aarch64

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

    - name: Build demo binary
      working-directory: examples/demo
      run: cargo build --release --target ${{ matrix.target }}

    - name: Prepare release asset
      run: |
        mkdir -p release-assets
        cp examples/demo/target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release-assets/${{ matrix.asset_name }}

    - name: Upload Release Asset
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/${{ matrix.asset_name }}

  generate-docs:
    name: Generate and Deploy Documentation
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-docs-release-${{ hashFiles('**/Cargo.lock') }}

    - name: Build documentation
      run: cargo doc --workspace --all-features --no-deps

    - name: Create documentation archive
      run: |
        cd target/doc
        tar -czf ../../documentation.tar.gz *

    - name: Upload Documentation Asset
      uses: softprops/action-gh-release@v1
      with:
        files: documentation.tar.gz
